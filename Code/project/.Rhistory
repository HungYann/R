library(shiny)
runApp()
library(shiny)
runExample("02_text")
runApp()
runExample("03_reactivity")
runExample("03_reactivity")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
head(counties)
counties <- readRDS("data/counties.rds")
head(counties)
install.packages(c("maps","mapproj"))
library(maps)
library(mapproj)
source("helpers.R")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/R/app.R')
source('~/Desktop/R/app.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
analyticsData<-read.csv("LifeExpectancyData.csv")
analyticsData.head()
runApp()
head(analyticsData)
head(analyticsData$Country)
head(analyticsData[1:10,"Country"])
head(analyticsData[1:10,"Country"])
analyticsData<-read.csv("LifeExpectancyData.csv")
head(analyticsData[1:10,"Year"])
analyticsData[1:10,"Year"]
analyticsData%>%head()
head(analyticsData)
analyticsData(Life.expectancy,BMI,data = .)
analyticsData%>%qplot(Life.expectancy,BMI,data = .)
library(magrittr)
analyticsData%>%qplot(Life.expectancy,BMI,data = .)
library(graphics)
analyticsData%>%plot(Life.expectancy,BMI,data = .)
analyticsData%>%plot(Life.expectancy
,BMI,data = .)
analyticsData%>%plot("Life expectancy"
,BMI,data = .)
analyticsData%>%plot("Life expectancy"
,"BMI",data = .)
plot(analyticsData["Life expactancy"],analyticsData["BMI"])
head(analyticsData["Life expactancy"])
plot(analyticsData$Life.expectancy,analyticsData$BMI)
plot(analyticsData$BMI,analyticsData$Life.expectancy)
gplot(analyticsData$BMI,analyticsData$Life.expectancy)
library(ggplot2)
geom_point(aes(x=analyticsData$BMI,y=analyticsData$Life.expectancy,colour=analyticsData$Country)
)
geom_point(aes(x=analyticsData$BMI,y=analyticsData$Life.expectancy,colour=analyticsData$Country))
ggplot()+geom_point(aes(x=analyticsData$BMI,y=analyticsData$Life.expectancy,colour=analyticsData$Country))
ggplot()+geom_point(aes(x=analyticsData$Life.expectancy,y=analyticsData$BMI))
ggplot()+geom_point(aes(x=analyticsData$Life.expectancy,y=analyticsData$BMI,colours(analyticsData$Country)))
ggplot()+geom_point(aes(x=analyticsData$Life.expectancy,y=analyticsData$BMI,colour=analyticsData$Country))
geom_point(aes(x=analyticsData$BMI,y=analyticsData$Life.expectancy,colour=analyticsData$Country))ggplot()+geom_point(aes(x=analyticsData$Life.expectancy,y=analyticsData$BMI))
ggplot()+geom_point(aes(x=analyticsData$Life.expectancy,y=analyticsData$BMI))
ggplot()+geom_point(aes(x=analyticsData$BMI,y=analyticsData$Life.expectancy))
ggplot()+geom_point(aes(x=analyticsData$Country,y=analyticsData$Life.expectancy))
library(randomForest)
install.packages(randomForest)
;j
exit()
install.packages("randomForest")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
ui<-fluidPage(
titlePanel(title = "This is my first shiny app, hello shiny"),
sidebarLayout(
siderbarPanel("this is side bar panel"),
mainPanel("this is the main panel text, output is displayed here")
)
)
shiny::runApp()
runApp()
runApp()
runApp()
list.files()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runExample()
runExample("09_upload")
runExample("09_upload")
library(shiny)
runExample()
runExample("11_timer")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()"),align="center"),
sidebarLayout(
h3("sidebarLayout"),
selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
)
source('~/Desktop/R/ui.R')
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel()
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel()
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
h3("s")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
h3("s"),
textOutput()
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
h3("s"),
textOutput("2")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout"),
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
h3("s"),
textOutput("main")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
h3("sidebarLayout")
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
h3("s"),
textOutput("main")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
sidebarPanel(
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
)
),
mainPanel(
textOutput("main")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
sidebarPanel(
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
),
mainPanel(
textOutput("main")
)
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
sidebarPanel(
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
textOutput("main")
)
),
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
sidebarPanel(
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
textOutput("main")
)
),
)
ui<-fluidPage(
titlePanel(title=h4("Demonstration of renderPlot()",align="center")),
sidebarLayout(
sidebarPanel(
#selectInput("var","Select the variables from the iris dataset",c("Sepal.Length"=1,"Sepal.Width"=2,"Petal.Length"=3,"Petal.Width"=4)),
#sliderInput("bins","Select the number of BINs for histogram",min=5,max=25,value=15),
# radioButtons("color","Select the colour of histogram",c("Green","Red","Yellow"),selected="Greeed")
),
mainPanel(
textOutput("main")
)
)
)
runApp()
runApp()
str(iris)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('project')
getwd()
setwd("/Users/liuhongyang/Desktop/R/projet")
setwd("/Users/liuhongyang/Desktop/R/project")
getwd()
runApp()
install.packages("leaflet")
shiny::runApp()
runApp()
analyticsData%>%select("Year")
runApp()
shiny::runApp()
View(df)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
